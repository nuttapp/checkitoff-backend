package models

import "errors"

const (
	// Base msg
	MissingMsgIDError       = "Msg ID cannot be empty"
	MissingMsgMethodError   = "Msg Method cannot be empty"
	MissingMsgResourceError = "Msg Resource cannot be empty"
	InvalidMsgMethodError   = "Invalid msg Method, for the given Resource"
	InvalidMsgResourceError = "Invalid msg Resource"

	// Client
	MissingClientIDError         = "Msg client ID cannot be empty"
	MissingClientDeviceTypeError = "Msg client DeviceType cannot be empty"
	// User
	MissingUserIDError = "Msg user ID cannot be empty"
	// Server
	MissingServerHostnameError  = "Msg server Hostname cannot be empty"
	MissingServerIPAddressError = "Msg server IPAddress cannot be empty"
	// List
	MissingListIDError    = "List ID cannot be emtpy"
	MissingListTitleError = "List Title cannot be empty"
	// ListItem
)

//go:generate stringer -type=ResType
const (
	// A message generated by an application that is purely informational in nature.
	// Information messages should not require action on the part of a user or administrator.
	LogInformation = "information"
	// A message generated by an application that represents an known edge case
	// or condition that requires furthur attention.
	// Warning messages generally require some action on the part of a user or administrator.
	LogWarning = "warning"
	// They generally do not disrupt the overal flow of an application.
	// A KnownError should be used when the exception raised is an expected condition.
	LogKnownError = "known-error"
	// Unknown errors represent exceptions that are not handled gracefully.
	// They generally disrupt the overall flow of an application.
	// An UnkownError should be used when the exception raised is an unexpected condition.
	UnkownError = "unknown-error"
)

const (
	MsgMethodCreate = "create"
	MsgMethodUpdate = "update"
	MsgMethodPatch  = "patch"
	MsgMethodDelete = "delete"

	// for ListItem
	MsgMethodCheck   = "check"
	MsgMethodUncheck = "uncheck"

	MsgResourceList     = "list"
	MsgResourceListItem = "list-item"
)

type Server struct {
	TTL       int    `json:"ttl"`
	Hostname  string `json:"hostname"`
	IPAddress string `json:"ipAddress"`
}

type Client struct {
	DeviceType string `json:"deviceType"`
	ID         string `json:"id"`
	OsVersion  string `json:"osVersion"`
}

type User struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Msg struct {
	Method   string `json:"method"`
	Resource string `json:"resource"`
	ID       string `json:"id"`
}

// ValidateEvent examples the fields that every event needs and throws an error if they're blank
func ValidateMsg(c Client, u User, e Msg, s []Server) error {
	if len(c.ID) == 0 {
		return errors.New(MissingClientIDError)
	}
	if len(c.DeviceType) == 0 {
		return errors.New(MissingClientDeviceTypeError)
	}
	if len(u.ID) == 0 {
		return errors.New(MissingUserIDError)
	}
	if len(e.Method) == 0 {
		return errors.New(MissingMsgMethodError)
	}
	if len(e.Resource) == 0 {
		return errors.New(MissingMsgResourceError)
	}
	if len(e.ID) == 0 {
		return errors.New(MissingMsgIDError)
	}
	for _, server := range s {
		if len(server.Hostname) == 0 {
			return errors.New(MissingServerHostnameError)
		}
		if len(server.IPAddress) == 0 {
			return errors.New(MissingServerIPAddressError)
		}
	}
	return nil
}
