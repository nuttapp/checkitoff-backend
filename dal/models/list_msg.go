// CreateListMsg encapsulates the action of a user creating a list
package models

import (
	"encoding/json"
	"errors"
	"time"

	"github.com/gocql/gocql"
)

//go:generate stringer -type=ResType
const (
	// A message generated by an application that is purely informational in nature.
	// Information messages should not require action on the part of a user or administrator.
	LogInformation = "information"
	// A message generated by an application that represents an known edge case
	// or condition that requires furthur attention.
	// Warning messages generally require some action on the part of a user or administrator.
	LogWarning = "warning"
	// They generally do not disrupt the overal flow of an application.
	// A KnownError should be used when the exception raised is an expected condition.
	LogKnownError = "known-error"
	// Unknown errors represent exceptions that are not handled gracefully.
	// They generally disrupt the overall flow of an application.
	// An UnkownError should be used when the exception raised is an unexpected condition.
	UnkownError = "unknown-error"
)

const (
	MsgMethodCreate = "create"
	MsgMethodUpdate = "update"
	MsgMethodPatch  = "patch"
	MsgMethodDelete = "delete"

	// for ListItem
	MsgMethodCheck   = "check"
	MsgMethodUncheck = "uncheck"

	MsgResourceList     = "list"
	MsgResourceListItem = "list-item"
)

type ListMsg struct {
	Msg
	Server Server `json:"server"`
	Client Client `json:"client"`
	User   User   `json:"user"`
	Data   List   `json:"data"`
	Err    error  `json:"error"`
}

func NewCreateListMsg() ListMsg {
	createdAt := time.Now().UTC()
	return ListMsg{
		Msg: Msg{
			Method:   MsgMethodCreate,
			Resource: MsgResourceList,
			ID:       gocql.TimeUUID().String(),
		},
		Data: List{
			CreatedAt: createdAt,
			UpdatedAt: createdAt,
		},
	}
}

// DeserializeCreateListMsg deserializes a JSON serialized CreateListMsg struct
func DeserializeCreateListMsg(jsonText []byte) (*ListMsg, error) {
	var event ListMsg
	err := json.Unmarshal(jsonText, &event)
	if err != nil {
		return nil, err
	}
	return &event, nil
}

func (e *ListMsg) IsReadyToBeSaved() error {
	err := ValidateMsg(&e.Client, &e.User, &e.Msg, &e.Server)
	if err != nil {
		return err
	}
	if len(e.Data.ID) == 0 {
		return errors.New(MissingListIDError)
	}
	if len(e.Data.Title) == 0 {
		return errors.New(MissingListTitleError)
	}
	isValidMethod := e.Method == MsgMethodCreate || e.Method == MsgMethodUpdate || e.Method == MsgMethodDelete
	if !isValidMethod {
		return errors.New(InvalidMsgMethodError)
	}
	if e.Resource != MsgResourceList {
		return errors.New(InvalidMsgResourceError)
	}
	return nil
}
